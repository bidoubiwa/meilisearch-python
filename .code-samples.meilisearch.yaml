# This code-samples file is used by the MeiliSearch documentation
# Every example written here will be automatically fetched by
# the documentation on build
# You can read more on https://github.com/meilisearch/documentation/tree/master/.vuepress/code-samples
---
get_one_index_1: |-
  client.get_index('movies')
list_all_indexes_1: |-
  client.get_indexes()
create_an_index_1: |-
  client.create_index('movies', {'primaryKey': 'movie_id'})
update_an_index_1: |-
  client.index('movies').update(primary_key='movie_review_id')
delete_an_index_1: |-
  client.delete_index('movies')
  // OR
  client.index('movies').delete()
get_one_document_1: |-
  client.index('movies').get_document(25684)
get_documents_1: |-
  client.index('movies').get_documents({'limit':2})
add_or_replace_documents_1: |-
  client.index('movies').add_documents([{
    'id': 287947,
    'title': 'Shazam',
    'poster': 'https://image.tmdb.org/t/p/w1280/xnopI5Xtky18MPhK40cZAGAOVeV.jpg',
    'overview': 'A boy is given the ability to become an adult superhero in times of need with a single magic word.',
    'release_date': '2019-03-23'
  }])
add_or_update_documents_1: |-
  client.index('movies').update_documents([{
      'id': 287947,
      'title': 'Shazam ⚡️',
      'genres': 'comedy'
  }])
delete_all_documents_1: |-
  client.index('movies').delete_all_documents()
delete_one_document_1: |-
  client.index('movies').delete_document(25684)
delete_documents_1: |-
  client.index('movies').delete_documents([23488, 153738, 437035, 363869])
search_post_1: |-
  client.index('movies').search('American ninja')
get_task_by_index_1: |-
  client.index('movies').get_task(1)
get_all_tasks_1: |-
  client.get_tasks()
get_task_1: |-
  client.get_task(1)
get_all_tasks_by_index_1: |-
  client.index('movies').get_tasks()
get_one_key_1: |-
  client.get_key('d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4')
get_all_keys_1: |-
  client.get_keys()
create_a_key_1: |-
  client.create_key(options={
    'description': 'Add documents: Products API key',
    'actions': ['documents.add'],
    'indexes': ['products'],
    'expiresAt': '2042-04-02T00:42:42Z'
  })
update_a_key_1: |-
  client.update_key(key='d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4',
    options={
      'description': 'Manage documents: Products/Reviews API key',
      'actions': ['documents.add', 'documents.delete'],
      'indexes': ['products', 'reviews'],
      'expiresAt': '2042-04-02T00:42:42Z'
  })
delete_a_key_1: |-
  client.delete_key('d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4')
get_settings_1: |-
  client.index('movies').get_settings()
update_settings_1: |-
  client.index('movies').update_settings({
    'rankingRules': [
        'words',
        'typo',
        'proximity',
        'attribute',
        'sort',
        'exactness',
        'release_date:desc',
        'rank:desc'
    ],
    'distinctAttribute': 'movie_id',
    'searchableAttributes': [
        'title',
        'description',
        'genre'
    ],
    'displayedAttributes': [
        'title',
        'description',
        'genre',
        'release_date'
    ],
    'sortableAttributes': [
        'title',
        'release_date'
    ],
    'stopWords': [
        'the',
        'a',
        'an'
    ],
    'synonyms': {
        'wolverine': ['xmen', 'logan'],
        'logan': ['wolverine']
    },
    'acceptNewFields': False
  })
reset_settings_1: |-
  client.index('movies').reset_settings()
get_synonyms_1: |-
  client.index('movies').get_synonyms()
update_synonyms_1: |-
  client.index('movies').update_synonyms({
    'wolverine': ['xmen', 'logan'],
    'logan': ['wolverine', 'xmen'],
    'wow': ['world of warcraft']
  })
reset_synonyms_1: |-
  client.index('movies').reset_synonyms()
get_stop_words_1: |-
  client.index('movies').get_stop_words()
update_stop_words_1: |-
  client.index('movies').update_stop_words(['of', 'the', 'to'])
reset_stop_words_1: |-
  client.index('movies').reset_stop_words()
get_ranking_rules_1: |-
  client.index('movies').get_ranking_rules()
update_ranking_rules_1: |-
  client.index('movies').update_ranking_rules([
      'words',
      'typo',
      'proximity',
      'attribute',
      'sort',
      'exactness',
      'release_date:asc',
      'rank:desc'
  ])
reset_ranking_rules_1: |-
  client.index('movies').reset_ranking_rules()
get_distinct_attribute_1: |-
  client.index('shoes').get_distinct_attribute()
update_distinct_attribute_1: |-
  client.index('shoes').update_distinct_attribute('skuid')
reset_distinct_attribute_1: |-
  client.index('shoes').reset_distinct_attribute()
get_filterable_attributes_1: |-
  client.index('movies').get_filterable_attributes()
update_filterable_attributes_1: |-
  client.index('movies').update_filterable_attributes([
    'genres',
    'director'
  ])
reset_filterable_attributes_1: |-
  client.index('movies').reset_filterable_attributes()
get_searchable_attributes_1: |-
  client.index('movies').get_searchable_attributes()
update_searchable_attributes_1: |-
  client.index('movies').update_searchable_attributes([
      'title',
      'description',
      'uid'
  ])
reset_searchable_attributes_1: |-
  client.index('movies').reset_searchable_attributes()
get_displayed_attributes_1: |-
  client.index('movies').get_displayed_attributes()
update_displayed_attributes_1: |-
  client.index('movies').update_displayed_attributes([
      'title',
      'description',
      'genre',
      'release_date'
  ])
reset_displayed_attributes_1: |-
  client.index('movies').reset_displayed_attributes()
get_sortable_attributes_1: |-
  client.index('books').get_sortable_attributes()
update_sortable_attributes_1: |-
  client.index('books').update_sortable_attributes([
    'price',
    'author'
  ])
reset_sortable_attributes_1: |-
  client.index('books').reset_sortable_attributes()
get_index_stats_1: |-
  client.index('movies').get_stats()
get_indexes_stats_1: |-
  client.get_all_stats()
get_health_1: |-
  client.health()
get_version_1: |-
  client.get_version()
distinct_attribute_guide_1: |-
  client.index('jackets').update_settings({'distinctAttribute': 'product_id'})
field_properties_guide_searchable_1: |-
  client.index('movies').update_settings({
    'searchableAttributes': [
        'title',
        'description',
        'genre'
  ]})
field_properties_guide_displayed_1: |-
  client.index('movies').update_settings({
    'displayedAttributes': [
        'title',
        'description',
        'genre',
        'release_date'
  ]})
filtering_guide_1: |-
  client.index('movies').search('Avengers', {
    'filter': 'release_date > 795484800'
  })
filtering_guide_2: |-
  client.index('movies').search('Batman', {
    'filter': 'release_date > 795484800 AND (director = "Tim Burton" OR director = "Christopher Nolan")'
  })
filtering_guide_3: |-
  client.index('movies').search('horror', {
    'filter': 'director = "Jordan Peele"'
  })
filtering_guide_4: |-
  client.index('movies').search('Planet of the Apes', {
    'filter': 'rating >= 3 AND (NOT director = "Tim Burton")'
  })
search_parameter_guide_query_1: |-
  client.index('movies').search('shifu')
search_parameter_guide_offset_1: |-
  client.index('movies').search('shifu', {
    'offset': 1
  })
search_parameter_guide_limit_1: |-
  client.index('movies').search('shifu', {
    'limit': 2
  })
search_parameter_guide_retrieve_1: |-
  client.index('movies').search('shifu', {
    'attributesToRetrieve': ['overview', 'title']
  })
search_parameter_guide_crop_1: |-
  client.index('movies').search('shifu', {
    'attributesToCrop': ['overview'],
    'cropLength': 10
  })
search_parameter_guide_highlight_1: |-
  client.index('movies').search('winter feast', {
    'attributesToHighlight': ['overview']
  })
search_parameter_guide_filter_1: |-
  client.index('movies').search('n', {
    'filter': 'title = Nightshift'
  })
search_parameter_guide_filter_2: |-
  client.index('movies').search('shifu', {
    'filter': 'title = "Kung Fu Panda"'
  })
search_parameter_guide_matches_1: |-
  client.index('movies').search('winter feast', {
    'matches': 'true'
  })
settings_guide_synonyms_1: |-
  client.index('tops').update_settings({
    'synonyms': {
      sweater: ['jumper'],
      jumper: ['sweater']
    },
  })
settings_guide_stop_words_1: |-
  client.index('movies').update_settings({
    'stopWords': [
        'the',
        'a',
        'an'
    ],
  })
settings_guide_ranking_rules_1: |-
  client.index('movies').update_settings({
    'rankingRules': [
        'words',
        'typo',
        'proximity',
        'attribute',
        'sort',
        'exactness',
        'release_date:asc',
        'rank:desc'
    ]
  })
settings_guide_distinct_1: |-
  client.index('jackets').update_settings({
    'distinctAttribute': 'product_id'
  })
settings_guide_searchable_1: |-
  client.index('movies').update_settings({
    'searchableAttributes': [
      'title',
      'description',
      'genre'
    ]
  })
settings_guide_displayed_1: |-
  client.index('movies').update_settings({
    'displayedAttributes': [
      'title',
      'description',
      'genre',
      'release_date'
    ]
  })
settings_guide_sortable_1: |-
  client.index('books').update_settings({
    'sortableAttributes': [
      'price',
      'author'
    ]
  })
add_movies_json_1: |-
  import json

  json_file = open('movies.json')
  movies = json.load(json_file)
  client.index('movies').add_documents(movies)
documents_guide_add_movie_1: |-
  client.index('movies').add_documents([{
    'movie_id': '123sq178',
    'title': 'Amélie Poulain'
  }])
search_guide_1: |-
  client.index('movies').search('shifu', {
    'limit': 5,
    'offset': 10
  })
search_guide_2: |-
  client.index('movies').search('Avengers', {
    'filter': 'release_date > 795484800'
  })
getting_started_add_documents_md: |-
  ```bash
  pip3 install meilisearch
  ```

  ```python
  import meilisearch
  import json

  client = meilisearch.Client('http://127.0.0.1:7700')

  json_file = open('movies.json')
  movies = json.load(json_file)
  client.index('movies').add_documents(movies)
  ```

  [About this SDK](https://github.com/meilisearch/meilisearch-python/)
getting_started_search_md: |-
  ```python
  client.index('movies').search('botman')
  ```

  [About this SDK](https://github.com/meilisearch/meilisearch-python/)
faceted_search_update_settings_1: |-
  client.index('movies').update_filterable_attributes([
      'director',
      'genres',
  ])
faceted_search_filter_1: |-
  client.index('movies').search('thriller', {
    'filter': [['genres = Horror', 'genres = Mystery'], 'director = "Jordan Peele"']
  })
faceted_search_facets_distribution_1: |-
  client.index('movies').search('Batman', {
    'facetsDistribution': ['genres']
  })
faceted_search_walkthrough_filterable_attributes_1: |-
  client.index('movies').update_filterable_attributes([
      'director',
      'producer',
      'genres',
      'production_companies'
  ])
faceted_search_walkthrough_filter_1: |-
  client.index('movies').search('thriller', {
    'filter': [['genres = Horror', 'genres = Mystery'], 'director = "Jordan Peele"']
  })
faceted_search_walkthrough_facets_distribution_1: |-
  client.index('movies').search('Batman', {
    'facetsDistribution': ['genres']
  })
post_dump_1: |-
  client.create_dump()
get_dump_status_1: |-
  client.get_dump_status('20201101-110357260')
phrase_search_1: |-
  client.index('movies').search('"african american" horror')
sorting_guide_update_sortable_attributes_1: |-
  client.index('books').update_sortable_attributes([
    'author',
    'price'
  ])
sorting_guide_update_ranking_rules_1: |-
  client.index('books').update_ranking_rules([
      'words',
      'sort',
      'typo',
      'proximity',
      'attribute',
      'exactness'
  ])
sorting_guide_sort_parameter_1: |-
  client.index('books').search('science fiction', {
    'sort': ['price:asc']
  })
sorting_guide_sort_parameter_2: |-
  client.index('books').search('butler', {
    'sort': ['author:desc']
  })
search_parameter_guide_sort_1: |-
  client.index('books').search('science fiction', {
    'sort': ['price:asc']
  })
geosearch_guide_filter_settings_1: |-
  client.index('restaurants').update_filterable_attributes([
    '_geo'
  ])
geosearch_guide_filter_usage_1: |-
  client.index('restaurants').search('', {
    'filter': '_geoRadius(45.4628328, 9.1076931, 2000)'
  })
geosearch_guide_filter_usage_2: |-
  client.index('restaurants').search('', {
    'filter': '_geoRadius(45.4628328, 9.1076931, 2000) AND type = pizza'
  })
geosearch_guide_sort_settings_1: |-
  client.index('restaurants').update_sortable_attributes([
    '_geo'
  ])
geosearch_guide_sort_usage_1: |-
  client.index('restaurants').search('', {
    'sort': ['_geoPoint(48.8583701,2.2922926):asc']
  })
geosearch_guide_sort_usage_2: |-
  client.index('restaurants').search('', {
    'sort': ['_geoPoint(48.8583701,2.2922926):asc', 'rating:desc']
  })
security_guide_search_key_1: |-
  client = Client('http://127.0.0.1:7700', 'apiKey')
  client.index('patient_medical_records').search()
security_guide_update_key_1: |-
  client = Client('http://127.0.0.1:7700', 'masterKey')
  client.update_key(key='d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4', options={
    'indexes': ['doctors']
  })
security_guide_create_key_1: |-
  client = Client('http://127.0.0.1:7700', 'masterKey')
    client.create_key(options={
    'description': 'Search patient records key',
    'actions': ['search'],
    'indexes': ['patient_medical_records'],
    'expiresAt': '2023-01-01T00:00:00Z'
  })
security_guide_list_keys_1: |-
  client = Client('http://127.0.0.1:7700', 'masterKey')
  client.get_keys()
security_guide_delete_key_1: |-
  client = Client('http://127.0.0.1:7700', 'masterKey')
  client.delete_key('d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4')
authorization_header_1: |-
  client = Client('http://127.0.0.1:7700', 'masterKey')
  client.get_keys()
